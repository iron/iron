//! This module contains Iron's middleware and handler system, the fundamental
//! building blocks for handling HTTP requests and generating responses.
//!
//! # Handlers
//!
//! A `Handler` will produce a `Response` given a `Request`. Most handlers are
//! functions or closures that accept a `&mut Request` as an argument and return
//! an `IronResult` containing a `Response`. An `IronResult` is returned instead of
//! directly returning a `Response` in order to indicate a possibility of
//! failure (e.g. database timeout).
//!
//! Here's an example of a `Handler`:
//!
//! ```rust
//! use iron::prelude::*;
//! use iron::Handler;
//! use iron::status;
//!
//! fn hello_handler(req: &mut Request) -> IronResult<Response> {
//!     Ok(Response::with((status::Ok, "Hello world!")))
//! };
//! ```
//!
//! # Middleware
//!
//! In situations involving more complex logic, it may be desirable to transform
//! `Request`s passed to a `Handler` or altering `Response`s sent to the
//! clients. For example, an authorization step could only allow requests sent
//! by authorized users to be passed to a `Handler` and respond to all other
//! requests with a 403 status code. To faciliate such use cases, Iron's
//! middleware system allows `Handler`s to be extended by defining middleware,
//! which will perform transformations.
//!
//! There are three types of middleware:
//!
//! * A `BeforeMiddleware` alters a `Request`. It can be useful for handling
//!   control flow (e.g. routing and authorization).
//! * An `AroundMiddleware` wraps a `Handler`, changing both the `Response`
//!   passed to the `Handler` and the returned `Response`.
//! * An `AfterMiddleware` performs `Response` post-processing. It can be used
//!   for editing headers or logging `Response`s, but it should _not_ be used for
//!   changing the body of a `Response`.
//!
//! See the documentation for each middleware for more details.
//!
//! ## Defining the middleware pipeline
//!
//! A `Chain` is a `Handler` that wraps another `Handler`. It is used to attach
//! middleware to the wrapped `Handler` using a `link` method corresponding to
//! each type of middleware. A sample middleware pipeline is shown below:
//!
//! ```rust
//! use iron::prelude::*;
//! use iron::middleware::*;
//!
//! # use iron::status;
//! # fn hello_handler(req: &mut Request) -> IronResult<Response> {
//! #     Ok(Response::with((status::Ok, "Hello world!")))
//! # };
//!
//! struct RequestLoggingMiddleware;
//! impl BeforeMiddleware for RequestLoggingMiddleware {
//!     fn before(&self, req: &mut Request) -> IronResult<()> {
//!         println!("{:?}", req);
//!         Ok(())
//!     }
//! }
//!
//! let mut chain = Chain::new(hello_handler);
//! chain.link_before(RequestLoggingMiddleware {});
//! // Since a Chain is a Handler, chain can be passed to Iron::new without any problems.
//! // Iron::new(chain).http("localhost:3000").unwrap();
//! ```
//!
//! # The Request Handling Flow
//!
//! A diagram modeling the entire middleware system process is shown below:
//!
//! ```plain
//! [b] = BeforeMiddleware
//! [a] = AfterMiddleware
//! [[h]] = AroundMiddleware
//! [h] = Handler
//! ```
//!
//! With no errors, the flow looks like:
//!
//! ```plain
//! [b] -> [b] -> [b] -> [[[[h]]]] -> [a] -> [a] -> [a] -> [a]
//! ```
//!
//! A request first travels through all `BeforeMiddleware`, then a `Response` is
//! generated by the `Handler`, which can be an arbitrary nesting of
//! `AroundMiddleware`, then all `AfterMiddleware` are called with both the
//! `Request` and `Response`. After all `AfterMiddleware` have been fired, the
//! response is written back to the client.
//!
//! Iron's error handling system is pragmatic and focuses on tracking two pieces
//! of information for error receivers (other middleware):
//!
//! * The cause of the error
//! * The result (what to do about) the error.
//!
//! The cause of the error is represented simply by the error itself, and the
//! result of the error, representing the action to take in response to the
//! error, is a complete Response, which will be sent at the end of the error
//! flow.
//!
//! When an error is thrown in Iron by any middleware or handler returning an
//! `Err` variant with an `IronError`, the flow of the `Request` switches to the
//! error flow, which proceeds to just call the `catch` method of middleware and
//! sidesteps the `Handler` entirely, since there is already a `Response` in the
//! error.
//!
//! A `Request` can exit the error flow by returning an Ok from any of the catch
//! methods. This resumes the flow at the middleware immediately following the
//! middleware which handled the error. It is impossible to "go back" to an
//! earlier middleware that was skipped.
//!
//! Generally speaking, returning a 5XX error code means that the error flow
//! should be entered by raising an explicit error. Dealing with 4XX errors is
//! trickier, since the server may not want to recognize an error that is
//! entirely the clients fault; handling of 4XX error codes is up to to each
//! application and middleware author.
//!
//! Middleware authors should be cognizant that their middleware may be skipped
//! during the error flow. Anything that *must* be done to each `Request` or
//! `Response` should be run during both the normal and error flow by
//! implementing the `catch` method to also do the necessary action.

use std::sync::Arc;
use std::rc::Rc;

use futures::{future, Future};
use {Request, Response, IronResult, IronError, BoxIronFuture};

/// `Handler`s are responsible for handling requests by creating Responses from Requests.
pub trait Handler: Send + Sync + 'static {
    /// Produce a `Response` from a Request, with the possibility of error.
    fn handle(&self, &mut Request) -> IronResult<Response>;
}

/// `AsyncHandler`s are responsible for handling all requests by returning a future that yields the actual response.
pub trait AsyncHandler: 'static {
    /// Produce a `Future` that handles the given request that produces an appropriate response or error.
    fn async_handle(&self, Request) -> BoxIronFuture<(Request, Response)>;
}

/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.
///
/// `BeforeMiddleware` are responsible for doing request pre-processing that requires
/// the ability to change control-flow, such as authorization middleware, or for editing
/// the request by modifying the headers.
///
/// `BeforeMiddleware` only have access to the Request, if you need to modify or read
/// a Response, you will need `AfterMiddleware`. Middleware which wishes to send an
/// early response that is not an error cannot be `BeforeMiddleware`, but should
/// instead be `AroundMiddleware`.
pub trait BeforeMiddleware: Send + 'static {
    /// Do whatever work this middleware should do with a `Request` object.
    fn before(&self, req: Request) -> BoxIronFuture<Request> { Box::new(future::ok(req)) }

    /// Respond to an error thrown by a previous `BeforeMiddleware`.
    ///
    /// Returning a `Ok` will cause the request to resume the normal flow at the
    /// next `BeforeMiddleware`, or if this was the last `BeforeMiddleware`,
    /// at the `Handler`.
    fn catch(&self, err: IronError) -> BoxIronFuture<Request> { Box::new(future::err(err)) }
}

/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.
///
/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing
/// any response post-processing.
///
/// `AfterMiddleware` should *not* overwrite the contents of a Response. In
/// the common case, a complete response is generated by the Chain's `Handler` and
/// `AfterMiddleware` simply do post-processing of that Response, such as
/// adding headers or logging.
pub trait AfterMiddleware: Send + 'static {
    /// Do whatever post-processing this middleware should do.
    fn after(&self, req: Request, res: Response) -> BoxIronFuture<(Request, Response)> {
        Box::new(future::ok((req, res)))
    }

    /// Respond to an error thrown by previous `AfterMiddleware`, the `Handler`,
    /// or a `BeforeMiddleware`.
    ///
    /// Returning `Ok` will cause the request to resume the normal flow at the
    /// next `AfterMiddleware`.
    fn catch(&self, err: IronError) -> BoxIronFuture<(Request, Response)> {
        Box::new(future::err(err))
    }
}

/// `AroundMiddleware` are used to wrap and replace the `Handler` in a `Chain`.
///
/// `AroundMiddleware` produce `Handler`s through their `around` method, which is
/// called once on insertion into a `Chain` or can be called manually outside of a
/// `Chain`.
pub trait AroundMiddleware {
    /// Produce a `Handler` from this `AroundMiddleware` given another `Handler`.
    ///
    /// Usually this means wrapping the handler and editing the `Request` on the
    /// way in and the `Response` on the way out.
    ///
    /// This is called only once, when an `AroundMiddleware` is added to a `Chain`
    /// using `Chain::around`, it is passed the `Chain`'s current `Handler`.
    fn around(self, handler: Box<AsyncHandler>) -> Box<AsyncHandler>;
}

/// The middleware chain used in Iron.
///
/// This is a canonical implementation of Iron's middleware system,
/// but Iron's infrastructure is flexible enough to allow alternate
/// systems.
pub struct Chain {
    befores: Vec<Rc<BeforeMiddleware>>,
    afters: Vec<Rc<AfterMiddleware>>,

    // Internal invariant: this is always Some
    handler: Option<Rc<Box<AsyncHandler>>>
}

impl Chain {
    /// Construct a new ChainBuilder from a `Handler`.
    pub fn new<H: AsyncHandler>(handler: H) -> Chain {
        Chain {
            befores: vec![],
            afters: vec![],
            handler: Some(Rc::new(Box::new(handler)))
        }
    }

    /// Link both a before and after middleware to the chain at once.
    ///
    /// Middleware that have a Before and After piece should have a constructor
    /// which returns both as a tuple, so it can be passed directly to link.
    pub fn link<B, A>(&mut self, link: (B, A)) -> &mut Chain
    where A: AfterMiddleware, B: BeforeMiddleware {
        let (before, after) = link;
        self.befores.push(Rc::new(before));
        self.afters.push(Rc::new(after));
        self
    }

    /// Link a `BeforeMiddleware` to the `Chain`, after all previously linked
    /// `BeforeMiddleware`.
    pub fn link_before<B>(&mut self, before: B) -> &mut Chain
    where B: BeforeMiddleware {
        self.befores.push(Rc::new(before));
        self
    }

    /// Link a `AfterMiddleware` to the `Chain`, after all previously linked
    /// `AfterMiddleware`.
    pub fn link_after<A>(&mut self, after: A) -> &mut Chain
    where A: AfterMiddleware {
        self.afters.push(Rc::new(after));
        self
    }

    /// Apply an `AroundMiddleware` to the `Handler` in this `Chain`.
    ///
    /// Note: This function is being renamed `link_around()`, and will
    /// eventually be removed.
    pub fn around<A>(&mut self, around: A) -> &mut Chain
    where A: AroundMiddleware {
        self.link_around(around)
    }

    /// Apply an `AroundMiddleware` to the `Handler` in this `Chain`.
    pub fn link_around<A>(&mut self, around: A) -> &mut Chain
    where A: AroundMiddleware {
        let handler = Rc::try_unwrap(self.handler.take().unwrap());
        let handler = match handler {
            Ok(handler) => around.around(handler),
            Err(_) => panic!("Tried to wrap handler with request in progress!"),
        };
        self.handler = Some(Rc::new(handler));
        self
    }
}

impl AsyncHandler for Chain {
    fn async_handle(&self, req: Request) -> BoxIronFuture<(Request, Response)> {
       let mut ret: BoxIronFuture<Request> = Box::new(future::ok(req));
        for before in self.befores.iter() {
            let before = before.clone();
            ret = Box::new(ret.then(move |res| {
                match res {
                    Ok(req) => Box::new(before.before(req)) as Box<Future<Item=Request, Error=IronError>>,
                    Err(err) => Box::new(before.catch(err)),//return self.fail_from_before(req, index + i + 1, err)
                }
            }))
        }

        let handler = self.handler.as_ref().unwrap().clone();
        let mut ret: BoxIronFuture<(Request, Response)> = Box::new(ret.and_then(move |req| handler.async_handle(req)));

        for after in self.afters.iter() {
            let after = after.clone();
            ret = Box::new(ret.then(move |res| {
                match res {
                    Ok((req, response)) => Box::new(after.after(req, response)) as Box<Future<Item=(Request, Response), Error=IronError>>,
                    Err(err) => Box::new(after.catch(err)),//return self.fail_from_before(req, index + i + 1, err)
                }
            }))
        }
        // Yield to next phase.
        //self.continue_from_handler(req)
        return ret;
        //return Box::new(future::ok((ret.wait().unwrap(), Response::with((status::Ok)))))
        
    }
}

impl<F> AsyncHandler for F
where F: Send + Sync + 'static + Fn(Request) -> BoxIronFuture<(Request, Response)> {
    fn async_handle(&self, req: Request) -> BoxIronFuture<(Request, Response)> {
        (*self)(req)
    }
}

impl<F> Handler for F
where F: Send + Sync + 'static + Fn(&mut Request) -> IronResult<Response> {
    fn handle(&self, req: &mut Request) -> IronResult<Response> {
        (*self)(req)
    }
}

impl AsyncHandler for Box<AsyncHandler> {
    fn async_handle(&self, req: Request) -> BoxIronFuture<(Request, Response)> {
        (**self).async_handle(req)
    }
}

impl<F> BeforeMiddleware for F
where F: Send + Sync + 'static + Fn(Request) -> BoxIronFuture<Request> {
    fn before(&self, req: Request) -> BoxIronFuture<Request> {
        (*self)(req)
    }
}

impl BeforeMiddleware for Box<BeforeMiddleware> {
    fn before(&self, req: Request) -> BoxIronFuture<Request> {
        (**self).before(req)
    }

    fn catch(&self, err: IronError) -> BoxIronFuture<Request> {
        (**self).catch(err)
    }
}

impl<T> BeforeMiddleware for Arc<T> where T: BeforeMiddleware + Sync {
    fn before(&self, req: Request) -> BoxIronFuture<Request> {
        (**self).before(req)
    }

    fn catch(&self, err: IronError) -> BoxIronFuture<Request> {
        (**self).catch(err)
    }
}

impl<F> AfterMiddleware for F
where F: Send + Sync + 'static + Fn(Request, Response) -> BoxIronFuture<(Request, Response)> {
    fn after(&self, req: Request, res: Response) -> BoxIronFuture<(Request, Response)> {
        (*self)(req, res)
    }
}

impl AfterMiddleware for Box<AfterMiddleware> {
    fn after(&self, req: Request, res: Response) -> BoxIronFuture<(Request, Response)> {
        (**self).after(req, res)
    }

    fn catch(&self, err: IronError) -> BoxIronFuture<(Request, Response)> {
        (**self).catch(err)
    }
}

impl<T> AfterMiddleware for Arc<T> where T: AfterMiddleware + Sync {
    fn after(&self, req: Request, res: Response) -> BoxIronFuture<(Request, Response)> {
        (**self).after(req, res)
    }

    fn catch(&self, err: IronError) -> BoxIronFuture<(Request, Response)> {
        (**self).catch(err)
    }
}

impl<F> AroundMiddleware for F
where F: FnOnce(Box<AsyncHandler>) -> Box<AsyncHandler> {
    fn around(self, handler: Box<AsyncHandler>) -> Box<AsyncHandler> {
        self(handler)
    }
}

#[cfg(test)]
mod test;
